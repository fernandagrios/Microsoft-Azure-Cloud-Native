üîê Objetivo Geral:
Permitir que apenas usu√°rios autenticados acessem uma API de pagamentos hospedada em Azure, protegendo o acesso com Azure AD e Bearer Token (OAuth 2.0).

üß≠ Explica√ß√£o do Fluxo:
Usu√°rio solicita autentica√ß√£o:

Um usu√°rio (√≠cone de pessoa √† esquerda) inicia o processo de autentica√ß√£o para acessar a API.

Ele se autentica com Azure Active Directory (Azure AD) ‚Äî que √© o servi√ßo de identidade da Microsoft.

Azure AD gera um token:

Ap√≥s a autentica√ß√£o, o Azure AD fornece um token de acesso (Access Token) ao usu√°rio.

Esse token segue o padr√£o Bearer Token, muito usado em APIs REST com OAuth 2.0.

Token √© enviado √† API:

O usu√°rio envia esse token no cabe√ßalho da requisi√ß√£o (Authorization: Bearer <token>) ao Azure API Management (APIM), que est√° simbolizado pela nuvem com o ponto central roxo.

APIM valida o token:

O Azure API Management atua como gateway, validando o token recebido com o Azure AD para garantir que ele seja v√°lido e autorizado.

Esse processo ocorre dentro do escopo do Azure, como indicado pelo contorno ‚ÄúAzure‚Äù.

Requisi√ß√£o √© encaminhada √† API de Pagamentos:

Uma vez autenticada e autorizada, a requisi√ß√£o segue para a API de Pagamentos, que est√° dentro do grupo de recursos chamado RG-APIPagamento.

A API est√° representada por um √≠cone azul com "WWW".

üì¶ Componentes envolvidos:

| Componente                      | Fun√ß√£o                                           |
| ------------------------------- | ------------------------------------------------ |
| **Usu√°rio**                     | Cliente que deseja acessar a API                 |
| **Azure AD**                    | Respons√°vel por autentica√ß√£o e emiss√£o de tokens |
| **Azure API Management (APIM)** | Gateway para expor e proteger a API              |
| **API de Pagamento**            | Backend real que processa pagamentos             |
| **Bearer Token**                | Forma de autentica√ß√£o baseada em OAuth 2.0       |

Guia passo a passo completo para voc√™ criar uma API de Pagamentos segura com Azure API Management (APIM)

‚úÖ Objetivo
Expor uma API de pagamentos de forma segura usando:

Azure App Service (Pricing Tier: Developer)

Azure API Management (APIM)

JWT com Azure AD (App Registration)

Subscription Key como boa pr√°tica de seguran√ßa

üîß ETAPA 1 ‚Äì Criar a API no Azure App Service
1.1. Criar um App Service Plan
Acesse o portal Azure Portal.

Pesquise por App Services.

Clique em "Create" > Web App.

Configure:

Name: api-pagamento

Runtime Stack: Escolha (.NET, Node.js etc.)

Operating System: Windows ou Linux

Region: Pr√≥xima a seus usu√°rios

App Service Plan: Escolha o Pricing Tier: Developer (F1 ou D1 para testes)

1.2. Deploy da API
Fa√ßa o deploy da sua API usando GitHub Actions, FTP ou Visual Studio.

Teste o endpoint diretamente: https://api-pagamento.azurewebsites.net/health

üîê ETAPA 2 ‚Äì Criar API Management e expor a API
2.1. Criar um Azure API Management
Pesquise por API Management Services.

Clique em "Create".

Configure:

Name: apim-pagamento

Pricing Tier: Developer (ideal para testes)

Resource Group: Mesmo da sua API (boa pr√°tica)

2.2. Importar a API
Dentro do APIM:

V√° em APIs > Add API > HTTP

Nome: API Pagamento

Web service URL: https://api-pagamento.azurewebsites.net

Escolha ‚ÄúEnable subscription key‚Äù (padr√£o ativado ‚Äî boa pr√°tica)

üõ°Ô∏è ETAPA 3 ‚Äì Boas pr√°ticas: Subscription Key
3.1. Ativar e exigir chave de subscri√ß√£o
Ao criar a API no APIM, ele exige uma chave de assinatura (Ocp-Apim-Subscription-Key) por padr√£o.

Isso obriga os consumidores da API a se autenticarem com essa chave, adicionando uma camada extra de seguran√ßa.

3.2. Testar com a chave
V√° em APIs > Test no Azure Portal.

Use a chave fornecida automaticamente na se√ß√£o de Subscriptions.

üîë ETAPA 4 ‚Äì Criar Autentica√ß√£o com JWT (Azure AD)
4.1. Registrar o aplicativo no Azure AD
V√° para Azure Active Directory > App registrations.

Clique em "New registration"

Nome: cliente-api-pagamento

Redirect URI (opcional): pode deixar em branco se for API

Salve o Application (client) ID e o Directory (tenant) ID

4.2. Criar um segredo (Client Secret)
Dentro do app registrado:

V√° em Certificates & secrets > New client secret

Nome: api-secret

Copie e salve o valor gerado com seguran√ßa

4.3. Configurar escopos e permiss√µes (opcional)
V√° em Expose an API

Clique em Set para o Application ID URI

Adicione um Scope, como access_as_user

V√° em API permissions > Add a permission > My APIs se for consumir de outro app

üß™ ETAPA 5 ‚Äì Proteger a API com JWT no APIM
5.1. Configurar valida√ß√£o de JWT
No Azure API Management:

V√° em APIs > API Pagamento > Inbound Processing

Adicione a seguinte pol√≠tica:

xml
Copy
Edit
<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized">
    <openid-config url="https://login.microsoftonline.com/{tenant-id}/v2.0/.well-known/openid-configuration" />
    <audiences>
        <audience>{application-client-id}</audience>
    </audiences>
</validate-jwt>
üîÅ Substitua {tenant-id} e {application-client-id} pelos valores reais da sua App Registration.

5.2. Testar com token JWT
Obtenha um token usando POST para:

bash
Copy
Edit
https://login.microsoftonline.com/{tenant-id}/oauth2/v2.0/token
Com body (x-www-form-urlencoded):

ini
Copy
Edit
grant_type=client_credentials
client_id=xxxxx
client_secret=xxxxx
scope=api://{application-client-id}/.default
Use esse token como:

makefile
Copy
Edit
Authorization: Bearer <access_token>

üéØ Resumo
Etapa	A√ß√£o
1	Criar a API com Azure App Service
2	Criar o Azure API Management e importar a API
3	Exigir subscription key como seguran√ßa adicional
4	Registrar o cliente no Azure AD e emitir JWT
5	Validar o JWT no APIM para acesso seguro